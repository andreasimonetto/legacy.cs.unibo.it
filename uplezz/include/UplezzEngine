#ifndef _UPLEZZ_ENGINE_
#define _UPLEZZ_ENGINE_
#include "Exit"
#include "Fountain"
#include "Tree"
#include "Player"
#include "UplezzTimer"
#include "Water"
#include "uplezz.h"
#include "mge/GameEngine"
#include "mre/Light"
#include "mre/RenderEngine"
#include "mre/SceneManager"
#include "mre/SkyBox"

#include <list>
#include <string>

using namespace mre;
using namespace mge;
using namespace std;

/** \mainpage Documentazione
	Questo progetto &egrave; stato realizzato durante l'anno accademico
2007/2008, nell'ambito del corso di Grafica 3D tenuto dal Professor Giulio 
Casciola presso l'Universit&agrave; degli Studi di Bologna. L'obiettivo &egrave;
la progettazione e l'implementazione di un piccolo videogame tridimensionale
con l'uso delle librerie grafiche GL sotto al server X. Il linguaggio di 
sviluppo usato &egrave; C++.

\section intro Introduzione
	Il sistema software si articola in tre moduli: il motore di gioco,
il motore di resa e l'interfaccia verso il sistema. Il primo implementa le
caratteristiche e le dinamiche del gioco, senza curarsi dei dettagli grafici. Il
secondo costituisce la parte principale del progetto e si sviluppa in una serie
di classi per la definizione, la trasformazione e la resa di oggetti grafici 
(tra cui MESH, animazioni, texture, punti luce, viste...). Il terzo modulo
consta di una serie di \em facilities per interfacciarsi col sistema operativo,
come ad esempio una classe orologio, una per i log, ecc...
Ogni modulo definisce un namespace contenente le relative classi; i namespace
sono, rispettivamente, \em mge (MGE Game Engine), \em mre (MRE Render Engine) e
\em sys. Gli oggetti al di fuori di questi namespace sono quelli che compongono
il gioco come specifica implementazione del motore di gioco e, al contempo,
come istanza del motore di resa.

\section game_engine Il motore di gioco (MGE)
	Il gioco si svolge su un mondo a griglia. Il giocatore (classe Player)
pu&ograve; muoversi in direzione dei quattro punti cardinali di cella in cella.
Su ogni cella pu&ograve; trovarsi al pi&ugrave; uno dei seguenti oggetti:
\arg il giocatore (classe Player);
\arg un albero (classe Tree);
\arg acqua (classe Water);
\arg una fontanella (classe Fountain);
\arg l'uscita (classe Exit).

Il giocatore pu&ograve; muoversi solo su una cella libera, sulla cella d'uscita
o su una cella occupata da una fontanella, spostandola. Per contro non
pu&ograve; mai spostarsi su una cella contenente un albero o acqua. Ovviamente
l'obiettivo &egrave; raggiungere l'uscita per accedere al livello successivo.
Ecco un esempio di livello di gioco:

\image html images/game_abstract.gif "Schema di gioco"

Per finire questo livello, il giocatore deve muoversi di 8 celle verso Est,
una verso Sud, spostare la fontanella di 2 celle a Sud, ecc... proseguendo verso
l'uscita. I vincoli che il motore di gioco deve rispettare sono:
\arg esistono un solo giocatore ed una sola uscita per livello;
\arg il giocatore pu&ograve; muovere una sola fontanella per volta. Inoltre
non sono consentiti i movimenti verso Nord e verso Sud di due fontanelle
adiacenti che hanno in comune il bordo della cella N/S. Analogamente per il caso
W/E; nei due schemi seguenti, alcuni spostamenti non sono possibili:
\verbatim
-P-         -----                      LEGENDA
-@-         -P@@-                      P : Giocatore
-@-         -----                      @ : Fontanella
---          (2)                       - : Cella libera
(1)
\endverbatim
Infatti, nel caso (1) le celle su cui stanno le fontanelle, hanno un lato in
comune; il giocatore in questo caso non potr&agrave; muoversi verso Sud, 
poich&egrave; la fontanella a Sud &egrave; \em bloccata. Analogamente, nel caso
(2) il giocatore non potr&agrave; muoversi verso Est. Si noti che una 
fontanella pu&ograve; essere bloccata anche dagli altri oggetti del gioco. 
Inoltre nel caso (1) ambedue le fontanelle possono essere spostate nei versi 
W/E;
\arg il giocatore non pu&ograve; uscire dalla griglia di gioco, n&egrave;
transitare su celle occupate da alberi, acqua o fontanelle bloccate secondo
le modalit&agrave; di cui sopra.
\arg la fontanella che viene spostata in una direzione finisce sulla cella
immediatamente adiacente nella medesima direzione, a patto che questa sia 
libera;
\arg i livelli sono file di testo, salvati nel seguente formato:
\verbatim
MGEGRID 1.0
<M> <N>
<1,1> <1,2>  ...  <1,N>
<2,1> <2,2>  ...  <2,N>
 ...   ...   ...   ...  
<M,1> <M,2>  ...  <M,N>
\endverbatim
dove \em M ed \em N sono interi positivi che indicano il numero di righe e di
colonne della matrice sottostante, che descrive la composizione della griglia.
Le componenti <i, j> sono interi compresi fra 0 e 5, che rappresentano, 
rispettivamente: cella vuota (0), giocatore (1), acqua (2), fontanelle (3),
alberi (4) e uscita(5). Un esempio di file \em grid:
\verbatim
MGEGRID 1.0
9 11
4  0  4  0  4  0  4  0  4  0  4
0  2  2  2  2  2  2  2  2  2  0
4  2  5  0  0  0  0  0  0  2  4
4  2  0  0  0  0  0  0  0  2  4
0  2  0  0  0  1  0  0  0  2  0
4  2  0  0  0  0  3  0  0  2  4
0  2  0  0  0  0  0  0  0  2  0
0  2  2  2  2  2  2  2  2  2  0
4  0  4  0  4  0  4  0  4  0  4
\endverbatim

\section render_engine Il motore di resa (MRE)
	Il motore di resa s'interfaccia al server X per gestire l'I/O e le
finestre. Inoltre mette a disposizione una serie d'oggetti per definire, 
trasformare e rendere oggetti 3D. Lo schema generale d'un programma che usa
il motore di resa &egrave; descritto nella figura sotto:

\image html images/render_engine_abstract.gif "Render engine main loop"

L'utente pu&ograve; definire, all'inizio del programma, una serie di handler
per gestire gli eventi di I/O. Inoltre pu&ograve; richiedere al motore di resa
di ridisegnare la scena per intero. Altrimenti questa sar&agrave; ridisegnata
ugualmente con la frequenza di 25 volte al secondo. 
Per mezzo della classe mre::SceneFactory &egrave; possibile creare oggetti
geometrici o caricarli da file, mentre grazie allo mre::SceneManager &egrave;
possibile creare una scena, posizionare una camera (o pi&ugrave; di una, la
camera attiva viene scelta di volta in volta) e i punti luce. Di seguito 
&egrave; riportato l'esempio di un semplice programma che crea una scena 
con una sfera al centro e la visualizza:

\include mre/test.cc

L'ambiente 3D &egrave; gestito principalmente mediante la classe mre::Vector3f,
dove le componenti (0, 1, 2) = (x, y, z) corrispondono rispettivamente a 
larghezza, altezza e profondit&agrave;. Oppurtune operazioni primitive sono 
ridefinite per un uso pi&ugrave; agevole delle istanze di questa classe.

\section os_interface Interfacciarsi col sistema operativo (SYS)
	L'interfaccia col sistema mette a disposizione una classe "orologio di
sistema" (classe sys::Clock) munita di operazioni di somma e differenza tra 
orari e affiancata da una classe dedicata alla visualizzazione della data e 
dell'ora. Inoltre implementa una classe "cronometro" (sys::Timer) che "segnala"
lo scadere di un dato intervallo. Infine il \em singleton di classe sys::System 
(accessibile dal metodo statico sys::System::getInstance()) fornisce alcuni 
metodi per creare un log e per gestire gli stati d'uscita.
*/

/** Motore di Uplezz. Estende la classe mge::GameEngine per aggiungere le 
feature 3D al motore di gioco.
*/
class UplezzEngine : public mge::GameEngine, public mre::Object {
	private:
		string playerPath;
		Plane *tile1;
		SkyBox *skybox;
		Light *light;
		UplezzTimer timer;
		bool displayHelpOnline;
		list<mre::Object*> gridObjects;
		list<string> levels;
		list<string>::iterator nextLevel;

		UplezzEngine(const string &playerP);
	public:
		static void init(const string &playerPath) {
			if(!instance) 
				instance = new UplezzEngine(playerPath);
		}

		static UplezzEngine* getInstance() { return (UplezzEngine*)instance; }

		Player* getPlayer() const { return (Player*)player; }

		void toggleHelpOnline() { displayHelpOnline = !displayHelpOnline; }
		void suspendTimer() { timer.suspend(); }
		void restartTimer() { timer.restart(); }

		mge::Object* create(mge::Object::Symbol s, unsigned row, unsigned col);
		virtual int loadGrid(const string &path);

		void render() const;
		void run();
};

#endif

