#ifndef _MRE_MATERIAL_
#define _MRE_MATERIAL_
#include "mre/Texture2D"

namespace mre {

/** Materiali
*/
class Material {
	private:
		float diffuse[4];  // Diffuse component
		float ambient[4];  // Ambient component
		float specular[4]; // Specular component
		float emission[4]; // Emission component
		float shininess;   // Specular exponent

		Texture2D *mapKd;
	public:
		/** Costruttore di default */
		Material() {
			diffuse[0] = diffuse[1] = diffuse[2] = 0.8;
			ambient[0] = ambient[1] = ambient[2] = 0.2;
			specular[0] = specular[1] = specular[2] = 0.0;
			emission[0] = emission[1] = emission[2] = emission[3] = 0.0;
			diffuse[3] = ambient[3] = specular[3] = 1.0;
			shininess = 65.0;
			mapKd = 0;
		}

		/** Imposta la componente diffusa.
			\param[in] r Componente rossa
			\param[in] g Componente verde
			\param[in] b Componente blu
			\param[in] a Componente alpha
		*/
		void setDiffuse(float r, float g, float b, float a = 1.0) { diffuse[0] = r; diffuse[1] = g; diffuse[2] = b; diffuse[3] = a; } 

		/** Imposta la componente ambiente.
			\param[in] r Componente rossa
			\param[in] g Componente verde
			\param[in] b Componente blu
			\param[in] a Componente alpha
		*/
		void setAmbient(float r, float g, float b, float a = 1.0) { ambient[0] = r; ambient[1] = g; ambient[2] = b; ambient[3] = a; } 

		/** Imposta la componente speculare.
			\param[in] r Componente rossa
			\param[in] g Componente verde
			\param[in] b Componente blu
			\param[in] a Componente alpha
		*/
		void setSpecular(float r, float g, float b, float a = 1.0) { specular[0] = r; specular[1] = g; specular[2] = b; specular[3] = a; } 

		/** Imposta la componente emissiva.
			\param[in] r Componente rossa
			\param[in] g Componente verde
			\param[in] b Componente blu
			\param[in] a Componente alpha
		*/
		void setEmission(float r, float g, float b, float a = 1.0) { emission[0] = r; emission[1] = g; emission[2] = b; emission[3] = a; } 

		/** Imposta il fattore di luminosit&agrave; (coefficiente di Phong). */
		void setShininess(float sh) { shininess = sh; }

		/** Collega una texture al materiale */
		void attachTexture(Texture2D *tex) { mapKd = tex; }

		/** Scollega la texture collegata */
		Texture2D* detachTexture() { Texture2D *tex = mapKd; mapKd = 0; return tex; }

		/** Ritorna la texture collegata al materiale */
		Texture2D* getTexture() const { return mapKd; }
		
		/** Attiva il materiale corrente */
		void bind() const;

		/** Disattiva il materiale corrente */
		void unbind() const;
};

};
#endif

